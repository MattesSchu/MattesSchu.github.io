[{"content":"Hier habe ich schnell und hacky mit Vue3 einen Zinsrechner fürs sparen gebastelt.\nhttps://mattesschu.github.io/mattu-credit/ Die Idee:\n🛫 Startkapital angeben 💸 monatl. Sparziel festlegen 🏦 Erwarteten Jahreszins angeben 📅 Zeitraum definieren 🏁 Wissen was so möglich wäre \u0026hellip; Träumen was hätte sein können Am Ende bin ich ganz zufrieden mit dem Ergebnis und habe noch ein CSS grid als Barchart verwendet xD\nDann noch eine Aufschlüsselung der einzelnen Jahre:\n","permalink":"https://mattesschu.github.io/posts/projects/mattu-credit/","summary":"Hier habe ich schnell und hacky mit Vue3 einen Zinsrechner fürs sparen gebastelt.\nhttps://mattesschu.github.io/mattu-credit/ Die Idee:\n🛫 Startkapital angeben 💸 monatl. Sparziel festlegen 🏦 Erwarteten Jahreszins angeben 📅 Zeitraum definieren 🏁 Wissen was so möglich wäre \u0026hellip; Träumen was hätte sein können Am Ende bin ich ganz zufrieden mit dem Ergebnis und habe noch ein CSS grid als Barchart verwendet xD\nDann noch eine Aufschlüsselung der einzelnen Jahre:","title":"Mattu-Credit - visuelle Motivation zum sparen"},{"content":"Es ist so einiges passiert über die Feiertage. Neben der schönen Winterzeit bin ich auch ein bisschen zum Coden, Modellieren und Riggen gekommen. Also ist hier mein Update zum Jahreswechsel.\nErstellen einer StateMachnine Über dieses Thema werde ich noch einen eigenen Artikel schreiben, aber das hier hat mir wirklich Spaß gebracht. Es hat mir auch ein bisschen mehr dabei geholfen, den Godot-Weg weiter zu verinnerlichen. Leider habe ich schmerzlich Generics vermisst und habe auf typensichere States verzichtet. Jetzt geht alles über primitive Strings und ausschließlich Tests während der Laufzeit. Vielleicht finde ich ja noch einen besseren Weg zu einem späteren Zeitpunkt.\nMeine StateMachine erbt von einem normalen Node. Sie hat den State und die Transition als Inner Class.\nErzeugen einer StateMachine:\nbehaviour_machine = MattuStateMachine.new() Erzeugen von den Transitions:\nvar walk_transition := MattuStateMachine.MattuStateTransition.new() walk_transition.event = \u0026#34;walk\u0026#34; walk_transition.to = \u0026#34;walk\u0026#34; var stop_transition := MattuStateMachine.MattuStateTransition.new() stop_transition.event = \u0026#34;stop\u0026#34; [...] Erzeugen der States mit den verknüpften Transitions:\nvar walking_state := MattuStateMachine.MattuState.new() walking_state.name = \u0026#34;walk\u0026#34; walking_state.on_enter = func(): [...] walking_state.on_exit = func(): [...] walking_state.add_transition(stop_transition) walking_state.add_transition(attack_transition) Abschließendes Füttern der StateMachine mit den einzelnen States:\nbehaviour_machine.add_state(idle_state) behaviour_machine.add_state(walking_state) behaviour_machine.add_state(attacking_state) Kennenlernen vom AnimationTree Dieser Abschnitt war ein bisschen hakelig und hat mich wirklich nicht so ganz überzeugt. Vielleicht habe ich auch während der Bahnfahrt und beim kleinen Zwischendurch-Coden das Große-Ganze nicht erkannt. Am Ende war ich verwirrt.\nJetzt hatte ich meine Spinne die läuft in Godot 🥳 Aber damit fingen die Probleme erst an\u0026hellip; Als Nächstes wollte ich zwischen den einzelnen Animtation (Walk, Idle, Attack) wechseln können. Diese Funktionalitäten Versprach ich mir von dem AnimationNodeStateMachine (toller Name). Ich dachte schon, dass meine eigene SateMachine damit überflüssig ist und habe mich in dieses neue Modul eingearbeitet.\nEinige Tutorials, Dokumentationen und YouTube Videos später hatte ich mir eher schlecht als Recht den AnimationTree zusammengebastelt. Vor allem die Einstellungen und das Handling des AnimationNodeStateMachine waren eher geht so.\nAusführen einer Attacke Jetzt sollte mein Gegner aber nicht nur Laufen, sondern auch Angreifen können! Also ab zurück nach Blender und den Node-Editor angeschmissen. (Tipp: nie vergessen, Fake User bei den Actions anzulegen damit sie nicht auf einmal verschwinden)\nDas kleine extra \u0026ldquo;-loop\u0026rdquo; Angefangen mit einem AnimationTree mit einer AnimationNodeStateMachine habe ich nicht verstehen können, warum meine Animationen nur einmalig abgespielt werden. Bis ich irgendwo darüber gestolpert bin, dass bei der Benennung der Action in Blender die Nameserweiterung -loop gesetzt werden kann, damit die Animationen beim gltf in einer Schleife abgespielt werden\u0026hellip; Obviously 🙃\nErstellen der logischen Kette Jetzt fing das Problem mit dem AnimationTree egtl. erst richtig an. Damit die Animation vom walk zu meiner zurückgelegten Distanz passt, musste ich meine Geschwindigkeit im Player anpassen\u0026hellip; und das war wirklich nicht so einfach herauszufinden. Schlussendlich habe ich jeden State meines AnimationTree zu einem BlendTree gemacht, um die Geschwindigkeit skalieren zu könnnen.\nAls lernte ich das travel() der AnimationNodeStateMachine kennen - eine ziemlich nice Idee. Hab sie eingebaut, mit meiner StateMachine verheiratet\u0026hellip; und TADADA: Gehen und dann Angreifen, kann se.\nIgnorieren vom AnimationTree Dann ging das nervige testen los:\nWie unterbreche ich eine Animation? Wie kann ich über den Code die Animationsgeschwindigkeit an die Lauf- oder Angriffsgeschwindigkeit anpassen? Warum eigentlich nicht einfach nur einen simplen AnimationPlayer ohne den AnimationTree? Die letzte Frage hat mich so lange gewurmt, bei dem ganzen rumgeklicke im AnimationTree, bis ich es einfach ohne den Tree direkt mit dem Player probiert habe. Beim ersten Versuch fühlte es sich einfach viel sinniger an. Ich konnte direkt die Geschwindigkeit und den Fade in einer Methode setzen - irre:\nanimation_player.play(animation_name, .2) Also, weg mit dem AnimaitonTree und hallo AnimationPlayer 😊\nDer CubeOfDestiny bekommt ein Update Damit ich auch endlich eine Schlacht beobachten kann, musste der CubeOfDestiny einem neuen Look weichen. Mit hin-her, her-hin, Zweifeln und ein bisschen mehr Zeit durch Corona, habe ich meinen zweiten ziemlich passablen Character gebastelt:\nVORHER NACHHER ","permalink":"https://mattesschu.github.io/posts/godot/02-state-machine/","summary":"Es ist so einiges passiert über die Feiertage. Neben der schönen Winterzeit bin ich auch ein bisschen zum Coden, Modellieren und Riggen gekommen. Also ist hier mein Update zum Jahreswechsel.\nErstellen einer StateMachnine Über dieses Thema werde ich noch einen eigenen Artikel schreiben, aber das hier hat mir wirklich Spaß gebracht. Es hat mir auch ein bisschen mehr dabei geholfen, den Godot-Weg weiter zu verinnerlichen. Leider habe ich schmerzlich Generics vermisst und habe auf typensichere States verzichtet.","title":"#03 States, States - wir brauchen States"},{"content":"Jetzt beginnt das herumspielen in einer Spiel-Engine mit Blender und allem drum und dran. Es ist so schön mal wieder den Default-Cube zu sehen und direkt zu lösc\u0026hellip; NEIN! Der Cube in Blender wurde ein bisschen skaliert, gedreht, dupliziert geschoben und geschoben, noch ein bisschen angemalt und fertig ist mein erster Charakter 🥳\nAlles ist eine Scene Ich muss mich noch an den Gedanken gewöhnen, dass alles in Godot eine Scene ist. Also habe ich ersteinmal eine Welt gebaut und mit einem Boden versehen. Anschließend das Licht eingeschalten und meinen Charakter platziert. Dann den Charakter wieder entfernt, weil er seine eigene Scene bekommt 😇\nJetzt wollte ich die Selektions- und Movememntlogik in einen eigenen Bereich auslagern und dachte: \u0026ldquo;Das wird ein Object!\u0026rdquo;. Also eine Node meiner Welt hinzugefügt, die nur ein Script erhalten. Losgeschrieben und an den richtigen stellen verknüpft.\nvar selectionController: SelectionController = null var movementController: MovementController = null # Called when the node enters the scene tree for the first time. func _ready(): selectionController = get_node(\u0026#34;../SelectionController\u0026#34;) movementController = get_node(\u0026#34;../MovementController\u0026#34;) Jetzt können Scripte aber auch als variable direkt mit preload verwendet werden. Ist das dann eine Instanz dieser Klasse? Ist dann doch nicht alles eine Scene? Das preload ist auch nicht nötig, wenn class_name bei dem einzubindenden Script verwendet wurde. Dann ist die Klasse direkt abrufbar.\nRaycasting und Pfade Ein bisschen Selection-Control hier, eine Instanzierung von Entities dort, arbeiten mit Collisions (Layer, Static \u0026hellip;.) et voilà - ich habe ein simples aber nettes herumkommandieren von meinen Einheiten. Dabei auch gleich ein paar Tastenkombination umgesetzt:\nlinks+click alt+links+click str+links+click ... Bug 01 Das ist nicht der allererste Fehler, den ich bis jetzt geschrieben habe, aber ein Problem, das ich jetzt noch nicht direkt lösen möchte. Ich muss halt die Collision mit dem Spielermodell beim Rechts+Click ignorieren und vielleicht braucht meine Welt auch Gravity?! Ich habe mich aber sehr gefreut darüber 🙃\nBäume pflanzen - kann ich Vielleich liegt es an der Weihnachtszeit und meinem tristen Spielfeld\u0026hellip; Deswegen habe ich mir ein paar Bäumchen gepflanzt. Ich habe noch keine Ahnung welchen Style das Spiel haben wird, aber in der Low-Poly Welt konnte ich immer ziemlich schnell brauchbare Gegenstände modellieren 🙃 Jetzt bekam ich probleme mit der move_and_slide Methode, die meinen Character an der Baumgrenze einfach festgesetzt hat. Also nehme ich mit, dass für mein Spiel aktuell move_and_collide besser geeignet ist. In Zukunft sollte ich mir auch den NavigationServer3D anschauen.\nDer erste Gegner ist da Hier ist es, der Schrecken aus der Tiefe, ein Koloss der alten Zeit, der Terror aus dem All. Ganz ehrlich, ich habe noch keine Ahnung wo es hingeht und was die Geschichte wird. Für meinen ersten POC ist das auch nicht relevant. Hauptsache ist, dass meine Minions verfolgt und gefressen werden 😈\nHacky, hacky, eine Sphere-Collision eingebaut, die Pfadfindung grob kopiert und meiner kleinen Einheit wird hinterhergelaufen 😅\nWir brauchen mehr Damage Langsam fügt sich das alles ein bisschen mehr zusammen. Auch mit mehr Scripten und Code kann versucht werden, eine grobe Struktur zu Bauen. Generalisierte Spielobjekte mit Teamzugehörigkeit und Angriffen, die sich abmelden, wenn sie kein Leben mehr haben und von der Spielfläche verschwinden.\nRiggeldy, Wobbeldy Endlich wieder Riggen in Blender 🥳 Es bringt zu viel Spaß, seine Spielobjekte zum Leben zu erwecken. Der Gltf Export mit den Actions war ein kleiner Krampf, aber mit einem Momentanen Workaround hat das auch funktioniert. Jetzt kann dir Jagd so richtig beginnen.\n","permalink":"https://mattesschu.github.io/posts/godot/01-new-game/","summary":"Jetzt beginnt das herumspielen in einer Spiel-Engine mit Blender und allem drum und dran. Es ist so schön mal wieder den Default-Cube zu sehen und direkt zu lösc\u0026hellip; NEIN! Der Cube in Blender wurde ein bisschen skaliert, gedreht, dupliziert geschoben und geschoben, noch ein bisschen angemalt und fertig ist mein erster Charakter 🥳\nAlles ist eine Scene Ich muss mich noch an den Gedanken gewöhnen, dass alles in Godot eine Scene ist.","title":"#02 Wo gehts lang?"},{"content":"Ungeachtet dessen, was bei Unity geschieht, habe ich mich für Godot entschieden. Der Übergang zu einer neuen IDE und Skriptsprache ist eine willkommene Herausforderung. Bisherige Erkenntnisse:\nJede Entität in Godot ist eine Szene. Der Wechsel zwischen 2D und 3D ist nahtlos. Godot bietet ein intuitives und erfreuliches Entwicklungserlebnis. Die Installation ist simpel, und innerhalb von Minuten kontrollierte ich bereits den Godot-Charakter mit meiner Tastatur.\nfunc _init(): print(\u0026#34;Hello, Godot!\u0026#34;) Das erste 2D Spiel Auf der Jagd nach weiteren Erkenntnissen erschließe ich die nächste Quest. Das Schreiben eines Dodge Spiels mit einer braunen Qualle. Aber ersteinmal gehen lernen.\nDie Animationen sind schon irgendwie cute. Aber der Flip beim Down-Walk ist schon ein bisschen irritierende. Aber diese Massen an Monstern die ich dann losgelassen habe fühlen sich irgendwie Falsch an. Lag natürlich daran, dass ich die Monster nicht auf dem Ende vom Timer freilasse, sondern mit jedem einzelnen Frame 😶.\nDann noch schnell in das 3d reingeschnuppert Ja okay, ich habe jetzt Boxen mit Collidern versehen und cute Incognitos gegeneinander antreten lassen. Nette Idee mit dem springen und dem Platzieren von Zylindern außerhalb des Views der Kamera.\nIrgendwie bin ich hooked und gespannt auf die nächsten Schritte. Ich habe noch überhaupt keinen Überblick, welche Nodes wie verstrickt werden können und bin ein bisschen von dem Kamera-Pivot irritiert\u0026hellip; Aber ich werde ihn verwenden und schauen was passiert\nDas eigene Spiel Nun ist es Zeit, ein Spielkonzept zu entwickeln und einen schnellen Proof of Concept zu starten.\n","permalink":"https://mattesschu.github.io/posts/godot/00-init/","summary":"Ungeachtet dessen, was bei Unity geschieht, habe ich mich für Godot entschieden. Der Übergang zu einer neuen IDE und Skriptsprache ist eine willkommene Herausforderung. Bisherige Erkenntnisse:\nJede Entität in Godot ist eine Szene. Der Wechsel zwischen 2D und 3D ist nahtlos. Godot bietet ein intuitives und erfreuliches Entwicklungserlebnis. Die Installation ist simpel, und innerhalb von Minuten kontrollierte ich bereits den Godot-Charakter mit meiner Tastatur.\nfunc _init(): print(\u0026#34;Hello, Godot!\u0026#34;) Das erste 2D Spiel Auf der Jagd nach weiteren Erkenntnissen erschließe ich die nächste Quest.","title":"#01 Moin Godot"}]